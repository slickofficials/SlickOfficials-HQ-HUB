from flask import Flask, render_template, jsonify, request
import os
import pandas as pd
import yaml
import requests
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler

app = Flask(__name__)

# ---------------------------------------------------------
# Load configuration safely
# ---------------------------------------------------------
def load_config():
    try:
        if os.path.exists("config.yaml"):
            with open("config.yaml", "r") as file:
                return yaml.safe_load(file)
        else:
            return {}
    except Exception as e:
        print(f"‚ö†Ô∏è Error loading config.yaml: {e}")
        return {}

# ---------------------------------------------------------
# Auto Poster Logic
# ---------------------------------------------------------
def auto_post():
    print("‚è∞ Auto posting triggered:", datetime.utcnow())

    try:
        posts_df = pd.read_csv("data/posts.csv")
        publer_api_key = os.getenv("PUBLER_API_KEY")
        publer_account_id = os.getenv("PUBLER_ID")

        if not publer_api_key or not publer_account_id:
            print("‚ùå Missing Publer credentials.")
            return

        headers = {
            "Authorization": f"Bearer {publer_api_key}",
            "Content-Type": "application/json"
        }

        for _, row in posts_df.iterrows():
            payload = {
                "accounts": [publer_account_id],
                "content": {
                    "text": f"{row['post_text']} üëâ {row['link']}",
                    "mediaUrls": [row['image_url']] if pd.notna(row['image_url']) else []
                }
            }

            res = requests.post("https://api.publer.io/v1/posts", headers=headers, json=payload)
            print(f"‚úÖ Posted: {row['post_text']} | Status: {res.status_code}")

    except Exception as e:
        print("üî• Auto post error:", e)

# ---------------------------------------------------------
# Scheduler setup (runs every 4 hours)
# ---------------------------------------------------------
scheduler = BackgroundScheduler()
scheduler.add_job(auto_post, "interval", hours=4)
scheduler.start()

# ---------------------------------------------------------
# Routes
# ---------------------------------------------------------
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/dashboard")
def dashboard():
    try:
        posts_df = pd.read_csv("data/posts.csv")
        return render_template("dashboard.html", posts=posts_df.to_dict(orient="records"))
    except Exception as e:
        return f"Error loading dashboard: {e}", 500

@app.route("/manual_run", methods=["POST"])
def manual_run():
    token = request.args.get("token")
    expected_token = os.getenv("MANUAL_RUN_TOKEN")

    if token != expected_token:
        return jsonify({"error": "Unauthorized"}), 403

    auto_post()
    return jsonify({"status": "manual run executed"})

# ---------------------------------------------------------
# Health Check
# ---------------------------------------------------------
@app.route("/health")
def health():
    return jsonify({"status": "ok", "time": datetime.utcnow().isoformat()})

# ---------------------------------------------------------
# Run the app
# ---------------------------------------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
